{{- if .Values.ingressGateways.enabled }}

{{- $root := . }}
{{- $defaults := .Values.ingressGateways.defaults }}
{{- $names := dict }}

{{- range .Values.ingressGateways.gateways }}

{{- $wanAddress := .wanAddress }}
{{- $service := .service }}

{{- if empty .name }}
# Check that the gateway name is provided
{{ fail "Ingress gateway names cannot be empty"}}
{{ end -}}
{{- if hasKey $names .name }}
#  Check that the gateway name is unique
{{ fail "Ingress gateway names must be unique"}}
{{ end -}}
{{- $_ := set $names .name .name }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  namespace: {{ $root.Release.Namespace }}
  labels:
    app: {{ template "consul.name" $root }}
    chart: {{ template "consul.chart" $root }}
    heritage: {{ $root.Release.Service }}
    release: {{ $root.Release.Name }}
    component: ingress-gateway
spec:
  replicas: {{ default $defaults.replicas .replicas }}
  selector:
    matchLabels:
      app: {{ template "consul.name" $root }}
      chart: {{ template "consul.chart" $root }}
      release: {{ $root.Release.Name }}
      component: ingress-gateway
  template:
    metadata:
      labels:
        app: {{ template "consul.name" $root }}
        chart: {{ template "consul.chart" $root }}
        release: {{ $root.Release.Name }}
        component: ingress-gateway
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
        {{- if $defaults.annotations }}
        # We allow both default annotations and gateway-specific annotations
        {{- tpl $defaults.annotations $root | nindent 8 }}
        {{- end }}
        {{- if .annotations }}
        {{- tpl .annotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if (or $defaults.affinity .affinity) }}
      affinity:
        {{ tpl (default $defaults.affinity .affinity) $root | nindent 8 | trim }}
      {{- end }}
      {{- if (or $defaults.tolerations .tolerations) }}
      tolerations:
        {{ tpl (default $defaults.tolerations .tolerations) $root | nindent 8 | trim }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      serviceAccountName: {{ .name }}
      volumes:
        - name: consul-bin
          emptyDir: {}
        - name: consul-service
          emptyDir:
            medium: "Memory"
        {{- if $root.Values.global.tls.enabled }}
        {{- if not (and $root.Values.externalServers.enabled $root.Values.externalServers.useSystemRoots) }}
        - name: consul-ca-cert
          secret:
            {{- if $root.Values.global.tls.caCert.secretName }}
            secretName: {{ $root.Values.global.tls.caCert.secretName }}
            {{- else }}
            secretName: {{ template "consul.fullname" $root }}-ca-cert
            {{- end }}
            items:
            - key: {{ default "tls.crt" $root.Values.global.tls.caCert.secretKey }}
              path: tls.crt
        {{- end }}
        {{- if $root.Values.global.tls.enableAutoEncrypt }}
        - name: consul-auto-encrypt-ca-cert
          emptyDir:
            medium: "Memory"
        {{- end }}
        {{- end }}
      initContainers:
        # We use the Envoy image as our base image so we use an init container to
        # copy the Consul binary to a shared directory that can be used when
        # starting Envoy.
        - name: copy-consul-bin
          image: {{ $root.Values.global.image | quote }}
          command:
          - cp
          - /bin/consul
          - /consul-bin/consul
          volumeMounts:
          - name: consul-bin
            mountPath: /consul-bin
        {{- if (and $root.Values.global.tls.enabled $root.Values.global.tls.enableAutoEncrypt) }}
        {{- include "consul.getAutoEncryptClientCA" $root | nindent 8 }}
        {{- end }}
        # service-init registers the ingress gateway service.
        - name: service-init
          image: {{ $root.Values.global.imageK8S }}
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if $root.Values.global.tls.enabled }}
            - name: CONSUL_HTTP_ADDR
              value: https://$(HOST_IP):8501
            - name: CONSUL_CACERT
              value: /consul/tls/ca/tls.crt
            {{- else }}
            - name: CONSUL_HTTP_ADDR
              value: http://$(HOST_IP):8500
            {{- end }}
          command:
            - "/bin/sh"
            - "-ec"
            - |
                {{- if (or $root.Values.global.acls.manageSystemACLs $root.Values.global.bootstrapACLs) }}
                consul-k8s acl-init \
                  -secret-name="{{ .name }}-ingress-gateway-acl-token" \
                  -k8s-namespace={{ $root.Release.Namespace }} \
                  -token-sink-file=/consul/service/acl-token
                {{ end }}

                {{- $source := (default $defaults.wanAddress.source $wanAddress.source) }}
                {{- $serviceType := (default $defaults.service.type $service.type) }}
                {{- if and (eq $source "Service") (not (default $defaults.service.enabled $service.enabled)) }}{{ fail "if ingressGateways .wanAddress.source=Service then ingressGateways .service.enabled must be set to true in either the defaults or in the gateway definition" }}{{ end }}
                {{- if or (eq $source "NodeIP") (and (eq $source "Service") (eq $serviceType "NodePort")) }}
                WAN_ADDR="${HOST_IP}"
                {{- else if eq $source "NodeName" }}
                WAN_ADDR="${NODE_NAME}"
                {{- else if and (eq $source "Service") (or (eq $serviceType "ClusterIP") (eq $serviceType "LoadBalancer")) }}
                consul-k8s service-address \
                  -k8s-namespace={{ $root.Release.Namespace }} \
                  -name={{ .name }}-ingress-gateway \
                  -output-file=/tmp/address.txt
                WAN_ADDR="$(cat /tmp/address.txt)"
                {{- else if eq $source "Static" }}
                {{- if eq (default $defaults.wanAddress.static $wanAddress.static) "" }}{{ fail "if ingressGateways .wanAddress.source=Static then ingressGateways .wanAddress.static cannot be empty and must be set in either the defaults or in the gateway definition" }}{{ end }}
                WAN_ADDR="{{ (default $defaults.wanAddress.static $wanAddress.static) }}"
                {{- else }}
                {{- fail "currently set ingressGateway values for wanAddress.source and service.type are not supported" }}
                {{- end }}

                {{- if eq $source "Service" }}
                {{- if eq $serviceType "NodePort" }}
                {{- if not (default $defaults.service.nodePort .service.nodePort) }}{{ fail "if ingressGateways .wanAddress.source=Service and ingressGateways .service.type=NodePort, ingressGateways .service.nodePort must be set in either the defaults or in the gateway definition" }}{{ end }}
                WAN_PORT="{{ (default $defaults.service.nodePort .service.nodePort) }}"
                {{- else }}
                WAN_PORT="{{ (default $defaults.service.port $service.port) }}"
                {{- end }}
                {{- else }}
                WAN_PORT="{{ (default $defaults.wanAddress.port $wanAddress.port) }}"
                {{- end }}

                cat > /consul/service/service.hcl << EOF
                service {
                  kind = "ingress-gateway"
                  name = "{{ .name }}"
                  port = 8443
                  address = "${POD_IP}"
                  tagged_addresses {
                    lan {
                      address = "${POD_IP}"
                      port = 8443
                    }
                    wan {
                      address = "${WAN_ADDR}"
                      port = ${WAN_PORT}
                    }
                  }
                  checks = [
                    {
                      name = "Ingress Gateway Listening"
                      interval = "10s"
                      tcp = "${POD_IP}:8443"
                      deregister_critical_service_after = "6h"
                    }
                  ]
                }
                EOF

                /consul-bin/consul services register \
                  {{- if (or $root.Values.global.acls.manageSystemACLs $root.Values.global.bootstrapACLs) }}
                  -token-file=/consul/service/acl-token \
                  {{- end }}
                  /consul/service/service.hcl
          volumeMounts:
            - name: consul-service
              mountPath: /consul/service
            - name: consul-bin
              mountPath: /consul-bin
            {{- if $root.Values.global.tls.enabled }}
            {{- if $root.Values.global.tls.enableAutoEncrypt }}
            - name: consul-auto-encrypt-ca-cert
            {{- else }}
            - name: consul-ca-cert
            {{- end }}
              mountPath: /consul/tls/ca
              readOnly: true
            {{- end }}
      containers:
        - name: ingress-gateway
          image: {{ default $defaults.imageEnvoy .imageEnvoy | quote }}
          {{- if (default $defaults.resources .resources) }}
          resources:
            {{ toYaml (default $defaults.resources .resources) | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: consul-bin
            mountPath: /consul-bin
          {{- if $root.Values.global.tls.enabled }}
          {{- if $root.Values.global.tls.enableAutoEncrypt }}
          - name: consul-auto-encrypt-ca-cert
          {{- else }}
          - name: consul-ca-cert
          {{- end }}
            mountPath: /consul/tls/ca
            readOnly: true
          {{- end }}
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if eq (default $defaults.wanAddress.source $wanAddress.source) "NodeName" }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- end }}
            {{- if (or $root.Values.global.acls.manageSystemACLs $root.Values.global.bootstrapACLs) }}
            - name: CONSUL_HTTP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "{{ template "consul.fullname" $root }}-ingress-gateway-acl-token"
                  key: "token"
            {{- end}}
            {{- if $root.Values.global.tls.enabled }}
            - name: CONSUL_HTTP_ADDR
              value: https://$(HOST_IP):8501
            - name: CONSUL_GRPC_ADDR
              value: https://$(HOST_IP):8502
            - name: CONSUL_CACERT
              value: /consul/tls/ca/tls.crt
            {{- else }}
            - name: CONSUL_HTTP_ADDR
              value: http://$(HOST_IP):8500
            - name: CONSUL_GRPC_ADDR
              value: $(HOST_IP):8502
            {{- end }}
          command:
            - /consul-bin/consul
            - connect
            - envoy
            - -ingress-gateway
          livenessProbe:
            tcpSocket:
              port: 8443
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 8443
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - name: gateway
              containerPort: 8443
              {{- if default $defaults.hostPort .hostPort }}
              hostPort:  {{ default $defaults.hostPort .hostPort }}
              {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-ec", "/consul-bin/consul services deregister -id=\"{{ .name }}\""]

        # lifecycle-sidecar ensures the ingress gateway is always registered with
        # the local Consul agent, even if it loses the initial registration.
        - name: lifecycle-sidecar
          image: {{ $root.Values.global.imageK8S }}
          volumeMounts:
            - name: consul-service
              mountPath: /consul/service
              readOnly: true
            - name: consul-bin
              mountPath: /consul-bin
            {{- if $root.Values.global.tls.enabled }}
            {{- if $root.Values.global.tls.enableAutoEncrypt }}
            - name: consul-auto-encrypt-ca-cert
            {{- else }}
            - name: consul-ca-cert
            {{- end }}
              mountPath: /consul/tls/ca
              readOnly: true
            {{- end }}
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if $root.Values.global.tls.enabled }}
            - name: CONSUL_HTTP_ADDR
              value: https://$(HOST_IP):8501
            - name: CONSUL_CACERT
              value: /consul/tls/ca/tls.crt
            {{- else }}
            - name: CONSUL_HTTP_ADDR
              value: http://$(HOST_IP):8500
            {{- end }}
          command:
            - consul-k8s
            - lifecycle-sidecar
            - -service-config=/consul/service/service.hcl
            - -consul-binary=/consul-bin/consul
            {{- if (or $root.Values.global.acls.manageSystemACLs $root.Values.global.bootstrapACLs) }}
            - -token-file=/consul/service/acl-token
            {{- end }}
      {{- if (default $defaults.priorityClassName .priorityClassName) }}
      priorityClassName: {{ default $defaults.priorityClassName .priorityClassName | quote }}
      {{- end }}
      {{- if (default $defaults.nodeSelector .nodeSelector) }}
      nodeSelector:
        {{ tpl (default $defaults.nodeSelector .nodeSelector) $root | indent 8 | trim }}
      {{- end }}
---
{{- end }}
{{- end }}
